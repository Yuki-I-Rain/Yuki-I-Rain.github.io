<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TRAE meetup @Guangzhou</title>
    <url>/2025/09/22/TRAE-meetup/</url>
    <content><![CDATA[开场
1.40 p.m.到达会场，领取物资，签名，并找位置坐下后，暖场活动就开始了

暖场活动大概持续20分钟，内容是每个人给自己的职业想3个标签（不剧透），然后让一位在台下的观众猜一下，猜对了各奖励一个抱枕

2.00 p.m. 活动正式开始，活动主线为4场讲座+茶歇


如何与AI（高潜实习生）协作

协作方法论：  明确任务边界，把模糊的需求转化为清晰的PRD  提供结构化的输入，以及必要的上下文信息  建立质量兜底制度，随时准备好接手补位


Context Engineering(上下文工程)高质量的输出，源于高质量的上下文输入

茶歇
合照
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>TRAE</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue常用指令</title>
    <url>/2025/09/04/directives/</url>
    <content><![CDATA[v-model基本用法在表单上使用，用于双向绑定

实用修饰符
lzay修饰符
  &lt;input v-model.lazy=&quot;textField&quot;/&gt; &lt;p&gt;文本输入框内容:&#123;&#123;textField&#125;&#125;&lt;/p&gt;
  只有当用户完成输入，即输入框失去焦点后，段落中才会同步到输入框中最终的文本数据。

trim修饰符
  &lt;input v-model.trim=&quot;textField&quot;/&gt; &lt;p&gt;文本输入框内容:&#123;&#123;textField&#125;&#125;&lt;/p&gt;
  将绑定的文本数据的首尾空格去掉。



v-on(@)基本用法
为html标签绑定事件
事件类型








事件
意义
可用的元素


click
单击事件，当组件被单击时触发
大部分 HTML 元素


dblclick
双击事件，当组件被双击时触发
大部分 HTML 元素


focus
获取焦点事件，例如输入框开启编辑模式时触发
input、select、textarea 等


blur
失去焦点事件，例如输入框结束编辑模式时触发
input、select、textarea 等


change
元素内容改变事件，输入框结束输入后，如果内容有变化，会触发此事件
input、select、textarea 等


select
元素内容选中事件，输入框中的文本被选中时会触发此事件
input、select、textarea 等


mousedown
鼠标按键被按下事件
大部分 HTML 元素


mouseup
鼠标按键抬起事件
大部分 HTML 元素


mousemove
鼠标在组件内移动事件
大部分 HTML 元素


mouseout
鼠标移出组件时触发
大部分 HTML 元素


mouseover
鼠标移入组件时触发
大部分 HTML 元素


Keypdown
键盘按键被按下
HTML 中所有表单元素


keyup
键盘按键被抬起
HTML 中所有表单元素


事件修饰符
capture修饰符
  可以将监听事件的实际设置为捕获阶段，示例如下：
  &lt;div @click.capture=&quot;click1&quot; style=&quot;border:solid red&quot;&gt;     外层    &lt;div @click.capture=&quot;click2&quot; style=&quot;border:solid red&quot;&gt;        中层        &lt;div @click.capture=&quot;click3&quot; style=&quot;border:solid red&quot;&gt;            点击        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;          
  点击最内层元素，控制台输出：
  外层中层内层

stop修饰符
  stop修饰符可以阻止事件的传递，例如：
  &lt;div @click.stop=&quot;click1&quot; style=&quot;border:solid red&quot;&gt;     外层    &lt;div @click.stop=&quot;click2&quot; style=&quot;border:solid red&quot;&gt;        中层        &lt;div @click.stop=&quot;click3&quot; style=&quot;border:solid red&quot;&gt;            点击        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;
  点击最内层元素，控制台：
  内层

其他修饰符








事件修饰符
作 用


stop
阻止事件传递


capture
监听捕获场景的事件


once
只触发一次事件


exact
只有精确满足按键的条件才会触发事件（按键组合）


self
当事件对象的 target 属性是当前组件时才触发事件


Prevent
禁止默认的事件


passive
不禁止默认事件


其他鼠标按键修饰符



left
鼠标左键（click.left）


right
鼠标右键


middle
鼠标中键



系统按键修饰符
  Vue中还提供了一些特殊的系统按键修饰符，这些修饰符是配合其他键盘按键或鼠标按键进行使用的，主要有如下4种：
  ctrl, shift, alt, meta(windows&#x2F;command)
  示例：
  &lt;div @mousedown. ctrl=&quot;mousedown&quot;&gt;鼠标按下&lt;/div&gt;&lt;--! 上面代码的作用是用户按下Ctrl键的同时,再按下鼠标按键才会触发绑定的事件函数。--&gt;
  &lt;input @keyup.alt.enter=&quot;keyup&quot;&gt;&lt;/input&gt; &lt;--! 上面代码的作用是用户按下Alt键的同时,再按回车键才会触发绑定的事件函数。 --&gt;


v-bind(:)基本用法为html标签绑定属性值（在html标签内，不能使用插值表达式）


]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>Distinguish having and where</title>
    <url>/2025/06/16/having-where/</url>
    <content><![CDATA[



WHERE
HAVING



执行时机
分组前过滤
分组后过滤


使用对象
原始表中的列
分组结果或聚合函数计算结果


性能
通常更高效
通常效率较低


SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) &gt; 5000;  -- 不能用WHERE过滤聚合结果

SELECT product_id, COUNT(*) as order_countFROM ordersGROUP BY product_idHAVING order_count &gt; 10;  -- 过滤分组后的计数结果

SELECT customer_id, SUM(amount) as total_spentFROM transactionsGROUP BY customer_idHAVING total_spent &gt; 1000;  -- WHERE不能使用别名


使用建议
优先使用WHERE：能在WHERE中完成的条件就不要用HAVING，减少分组处理的数据量
必须时才用HAVING：只有当过滤条件依赖于分组结果或聚合函数时才使用HAVING
组合使用：经常WHERE和HAVING一起使用，先用WHERE初步筛选，再用HAVING对分组结果过滤

]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/09/14/hello-world/</url>
    <content><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick StartCreate a new post$ hexo new &quot;My New Post&quot;

More info: Writing
Run server$ hexo server

More info: Server
Generate static files$ hexo generate

More info: Generating
Deploy to remote sites$ hexo deploy

More info: Deployment
]]></content>
      <categories>
        <category>Instruction</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Join(two tables)</title>
    <url>/2025/06/04/join/</url>
    <content><![CDATA[Basic sentenceSELECT columnsFROM table1() JOIN table2ON table1.column_name=table2.column_name; 

INNER JOININNER JOIN equals to JOIN,
Explicit form 
INNER JOIN

Implicit form
JOIN

Tables :Person :



personID
lastName
firstName



1
Wang
Allen


2
Alice
Bob


Address:



addressID
personID
city
state



1
2
New York City
New York


2
3
Leetcode
California


SELECT Person.firstName, Address.cityFROM PersonINNER JOIN AddressON Person.personID = Address.personID;

result:



firstName
city



Bob
New York City



LEFT JOINTables :SELECT Person.firstName, Address.cityFROM Person LEFT JOIN Address # Write in one line is more intuitiveON Person.personID = Address.personID;

result:



firstName
city



Bob
New York City


Allen
NULL



RIGHT JOINTables :SELECT Person.firstName, Address.cityFROM Person RIGHT JOIN Address # Write in one line is more intuitiveON Person.personID = Address.personID;

result:



firstName
city



Bob
New York City


NULL
Leetcode



FULL JOINTables :SELECT Person.firstName, Address.cityFROM Person FULL JOIN AddressON Person.personID = Address.personID;

result:



firstName
city



Bob
New York City


Allen
NULL


NULL
Leetcode



Summary
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Regular Expression</title>
    <url>/2025/06/15/regexp/</url>
    <content><![CDATA[一般形式WHERE example_column REGEXP &#x27;这里写正则表达式内容&#x27;

注意：

要加引号

默认情况不区分大小写
  若要区分，则使用


REGEXP BINARY


基本用法^ 表示字符串开始
e.g.  ^e表示以e开始
注意:若^在[]里面,则表示取补集
e.g.  [^a]表示除了a以外的所有字母

$表示字符串结束
e.g.x$表示以x结束

[]表示 character set，结合-使用表示范围，
e.g: [1-9]表示1,2,3,4,5….8,9组成的集合
[cde]表示c,d,e中的一个字符

{}为数量符,匹配前一个字符的数量
e.g: [0-9]{2}表示2个0-9中的任意字符
e{3,5}表示至少3个,至多5个e

？为数量符，匹配前一个字符1次或0次 
e.g.  -?表示搜寻’0个或者1个字符 “-“ 

+为数量符,匹配前一个字符至少1次
e.g.  3[a-z]+4表示3与4之间有至少一个字母

*为数量符,匹配前一个字符0次或多次(包括1次)
.等价于占位符,匹配(除了换行符外的)单个字符
|表示逻辑运算符”或”

例题电话号码格式校验_牛客题霸_牛客网
【鲸析】SQL面试大实话之【正则表达式 REGEXP 实战解析】_哔哩哔哩_bilibili

总结
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>组件中数据与事件的传递</title>
    <url>/2025/09/29/transmit/</url>
    <content><![CDATA[Created: 2025年9月29日 17:10Subject: Vue3
基本用法
当我们创建好了Vue应用实例后，使用mount方法可以将其绑定到指定的HTML元素上。应用实例可以使用component方法来定义组件，定义好组件后，可以直接在HTML文档中进行使用。

自定义警告提示框：


&lt;script&gt;  const App = Vue.createApp(&#123;&#125;)    const alertComponent = &#123;    data() &#123;      return &#123;        msg: &quot;警告框提示&quot;,        count: 0      &#125;    &#125;,    methods: &#123;      click() &#123;        alert(this.msg + this.count++)      &#125;    &#125;,    template: `&lt;div&gt;&lt;button @click=&quot;click&quot;&gt;按钮&lt;/button&gt;&lt;/div&gt;`  &#125;    App.component(&quot;my-alert&quot;, alertComponent)  App.mount(&quot;#Application&quot;)&lt;/script&gt;

需要使用自定义的组件时，只需使用组件名标签即可：
&lt;div id=&quot;Application&quot;&gt;    &lt;my-alert&gt;&lt;/my-alert&gt;    &lt;my-alert&gt;&lt;/my-alert&gt;&lt;/div&gt;

处理组件事件($emit)
用emit传递事件

&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Vue组件&lt;/title&gt;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;Application&quot;&gt;        &lt;my-alert @myclick=&quot;appfunc&quot; title=&quot;btn1&quot;&gt;&lt;/my-alert&gt;        &lt;my-alert title=&quot;btn2&quot;&gt;&lt;/my-alert&gt;    &lt;/div&gt;    &lt;script&gt;        const App = Vue.createApp(&#123;            methods:&#123;                appfunc()&#123;                    console.log(&quot;btn clicked&quot;)                &#125;            &#125;        &#125;)        const alertComponent = &#123;            props:[&quot;title&quot;],            template:`&lt;div&gt;&lt;button @click=&quot;$emit(&#x27;myclick&#x27;)&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/button&gt;&lt;/div&gt;`        &#125;        App.component(&quot;my-alert&quot;,alertComponent)        App.mount(&quot;#Application&quot;)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;


可以同时传递一些参数

&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Vue组件&lt;/title&gt;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;Application&quot;&gt;        &lt;my-alert @myclick=&quot;appfunc&quot; title=&quot;btn1&quot;&gt;&lt;/my-alert&gt;        &lt;my-alert @myclick=&quot;appfunc&quot; title=&quot;btn2&quot;&gt;&lt;/my-alert&gt;    &lt;/div&gt;    &lt;script&gt;        const App = Vue.createApp(&#123;            methods:&#123;                appfunc(param)&#123;                    console.log(param+&quot; clicked&quot;)                &#125;            &#125;        &#125;)        const alertComponent = &#123;            props:[&quot;title&quot;],            template:`&lt;div&gt;&lt;button @click=&quot;$emit(&#x27;myclick&#x27;,title)&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/button&gt;&lt;/div&gt;`        &#125;        App.component(&quot;my-alert&quot;,alertComponent)        App.mount(&quot;#Application&quot;)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;


若在传递事件之前，子组件还有一些内部的逻辑需要处理，也可以在子组件中包装一个方法

&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Vue组件&lt;/title&gt;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;Application&quot;&gt;        &lt;my-alert @myclick=&quot;appfunc&quot; title=&quot;btn1&quot;&gt;&lt;/my-alert&gt;        &lt;my-alert @myclick=&quot;appfunc&quot; title=&quot;btn2&quot;&gt;&lt;/my-alert&gt;    &lt;/div&gt;    &lt;script&gt;        const App = Vue.createApp(&#123;            methods:&#123;                appfunc(param)&#123;                    console.log(param+&quot; clicked&quot;)                &#125;            &#125;        &#125;)        const alertComponent = &#123;            props:[&quot;title&quot;],            methods:&#123;                click1()&#123;                    console.log(&quot;inside&quot;)                    this.$emit(&#x27;myclick&#x27;,this.title)                &#125;            &#125;,            template:`&lt;div&gt;&lt;button @click=&quot;click1&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/button&gt;&lt;/div&gt;`        &#125;        App.component(&quot;my-alert&quot;,alertComponent)        App.mount(&quot;#Application&quot;)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>Vue3</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>Union</title>
    <url>/2025/06/05/union/</url>
    <content><![CDATA[Basic SentenceSELECT column_name(s) FROM table_name1UNIONSELECT column_name(s) FROM table_name2


The SELECT statements within a UNION must have the same number of columns. Columns must also have similar data types. Meanwhile, the order of the columns in each SELECT statement must be the same.
SELECT will automatic deduplication, while SELECT ALL will not.


UNIONTables:
employees:



emp_id
name
dpt_id



1
apple
101


2
boy
102


3
cat
101


4
dog
103


former_employees:



emp_id
name
dpt_id



5
egg
102


2
boy
102


SELECT name, dpt_id FROM employeesUNIONSELECT name, dpt_id FROM former_employees;

result:



name
dpt_id




apple
101



boy
102
automatic deduplication


cat
101



dog
103



egg
102




UNION ALLTables: 
SELECT name, dpt_id FROM employeesUNION ALLSELECT name, dpt_id FROM former_employees;

result:



name
dpt_id




apple
101



boy
102
first record


cat
101



dog
103



egg
102



boy
102
from former_employees


]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Data type</title>
    <url>/2025/06/23/type/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
</search>
