[{"title":"组件中数据与事件的传递","url":"/2025/09/29/transmit/","content":"\n# 基本用法\n\n- 当我们创建好了Vue应用实例后，使用mount方法可以将其绑定到指定的HTML元素上。应用实例可以使用`component`方法来定义组件，定义好组件后，可以直接在HTML文档中进行使用。\n\n- 自定义警告提示框：\n\n```jsx\n<script>\n  const App = Vue.createApp({})\n  \n  const alertComponent = {\n    data() {\n      return {\n        msg: \"警告框提示\",\n        count: 0\n      }\n    },\n    methods: {\n      click() {\n        alert(this.msg + this.count++)\n      }\n    },\n    template: `<div><button @click=\"click\">按钮</button></div>`\n  }\n  \n  App.component(\"my-alert\", alertComponent)\n  App.mount(\"#Application\")\n</script>\n```\n\n需要使用自定义的组件时，只需使用组件名**标签**即可：\n\n```html\n<div id=\"Application\">\n    <my-alert></my-alert>\n    <my-alert></my-alert>\n</div>\n```\n\n# 处理组件事件($emit)\n\n- 用emit传递事件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Vue组件</title>\n    <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n</head>\n<body>\n    <div id=\"Application\">\n        <my-alert @myclick=\"appfunc\" title=\"btn1\"></my-alert>\n        <my-alert title=\"btn2\"></my-alert>\n    </div>\n    <script>\n        const App = Vue.createApp({\n            methods:{\n                appfunc(){\n                    console.log(\"btn clicked\")\n                }\n            }\n        })\n        const alertComponent = {\n            props:[\"title\"],\n            template:`<div><button @click=\"$emit('myclick')\">{{title}}</button></div>`\n        }\n        App.component(\"my-alert\",alertComponent)\n        App.mount(\"#Application\")\n    </script>\n</body>\n</html>\n```\n\n- 可以同时传递一些参数\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Vue组件</title>\n    <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n</head>\n<body>\n    <div id=\"Application\">\n        <my-alert @myclick=\"appfunc\" title=\"btn1\"></my-alert>\n        <my-alert @myclick=\"appfunc\" title=\"btn2\"></my-alert>\n    </div>\n    <script>\n        const App = Vue.createApp({\n            methods:{\n                appfunc(param){\n                    console.log(param+\" clicked\")\n                }\n            }\n        })\n        const alertComponent = {\n            props:[\"title\"],\n            template:`<div><button @click=\"$emit('myclick',title)\">{{title}}</button></div>`\n        }\n        App.component(\"my-alert\",alertComponent)\n        App.mount(\"#Application\")\n    </script>\n</body>\n</html>\n```\n\n- 若在传递事件之前，子组件还有一些内部的逻辑需要处理，也可以在子组件中包装一个方法\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Vue组件</title>\n    <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n</head>\n<body>\n    <div id=\"Application\">\n        <my-alert @myclick=\"appfunc\" title=\"btn1\"></my-alert>\n        <my-alert @myclick=\"appfunc\" title=\"btn2\"></my-alert>\n    </div>\n    <script>\n        const App = Vue.createApp({\n            methods:{\n                appfunc(param){\n                    console.log(param+\" clicked\")\n                }\n            }\n        })\n        const alertComponent = {\n            props:[\"title\"],\n            methods:{\n                click1(){\n                    console.log(\"inside\")\n                    this.$emit('myclick',this.title)\n                }\n            },\n            template:`<div><button @click=\"click1\">{{title}}</button></div>`\n        }\n        App.component(\"my-alert\",alertComponent)\n        App.mount(\"#Application\")\n    </script>\n</body>\n</html>\n```","tags":["Vue3","Frontend"]},{"title":"TRAE meetup @Guangzhou","url":"/2025/09/22/TRAE-meetup/","content":"\n# 开场\n- 1.40 p.m.到达会场，领取物资，签名，并找位置坐下后，暖场活动就开始了\n![2.jpg](https://img.xwyue.com/i/2025/09/22/68d0ab516310d.jpg)\n![1.jpg](https://img.xwyue.com/i/2025/09/22/68d0ab4635a6a.jpg)\n\n- 暖场活动大概持续20分钟，内容是每个人给自己的职业想3个标签（不剧透），然后让一位在台下的观众猜一下，猜对了各奖励一个抱枕\n- 2.00 p.m. 活动正式开始，活动主线为4场讲座+茶歇\n\n# 如何与AI（高潜实习生）协作\n\n![3.jpg](https://img.xwyue.com/i/2025/09/22/68d0ab4986b07.jpg)\n![4.jpg](https://img.xwyue.com/i/2025/09/22/68d0ab4f0f8e0.jpg)\n\n- 协作方法论：\n    明确任务边界，把模糊的需求转化为清晰的PRD\n    提供结构化的输入，以及必要的上下文信息\n    建立质量兜底制度，随时准备好接手补位\n\n---\n# Context Engineering(上下文工程)\n**高质量的输出，源于高质量的上下文输入**\n\n![5.jpg](https://img.xwyue.com/i/2025/09/22/68d0ab452c33c.jpg)\n![6.jpg](https://img.xwyue.com/i/2025/09/22/68d0ab3cd44cb.jpg)\n![7.jpg](https://img.xwyue.com/i/2025/09/22/68d0ab4125d27.jpg)\n\n# 茶歇\n\n![10.jpg](https://img.xwyue.com/i/2025/09/23/68d173fb6ae60.jpg)\n\n# 合照\n\n![11.jpg](https://img.xwyue.com/i/2025/09/23/68d173fe29d3e.jpg)\n\n","tags":["AI","TRAE"],"categories":["life"]},{"title":"Hello World","url":"/2025/09/14/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["Hexo"],"categories":["Instruction"]},{"title":"Vue常用指令","url":"/2025/09/04/directives/","content":"# v-model\n\n## 基本用法\n\n在表单上使用，用于双向绑定\n\n![image.png](https://img.xwyue.com/i/2025/09/29/68da7bea0183c.png)\n\n### 实用修饰符\n\n- lzay修饰符\n    \n    ```html\n    <input v-model.lazy=\"textField\"/>\n     <p>文本输入框内容:{{textField}}</p>\n    ```\n    \n    只有当用户完成输入，即输入框失去焦点后，段落中才会同步到输入框中最终的文本数据。\n    \n- trim修饰符\n    \n    ```html\n    <input v-model.trim=\"textField\"/>\n     <p>文本输入框内容:{{textField}}</p>\n    ```\n    \n    将绑定的文本数据的首尾空格去掉。\n    \n\n---\n\n# v-on(@)\n\n## 基本用法\n\n![image 1.png](https://img.xwyue.com/i/2025/09/29/68da7be95eac8.png)\n\n为html标签绑定事件\n\n### 事件类型\n\n|  |  |  |\n| --- | --- | --- |\n| 事件 | 意义 | 可用的元素 |\n| click | 单击事件，当组件被单击时触发 | 大部分 HTML 元素 |\n| dblclick | 双击事件，当组件被双击时触发 | 大部分 HTML 元素 |\n| focus | 获取焦点事件，例如输入框开启编辑模式时触发 | input、select、textarea 等 |\n| blur | 失去焦点事件，例如输入框结束编辑模式时触发 | input、select、textarea 等 |\n| change | 元素内容改变事件，输入框结束输入后，如果内容有变化，会触发此事件 | input、select、textarea 等 |\n| select | 元素内容选中事件，输入框中的文本被选中时会触发此事件 | input、select、textarea 等 |\n| mousedown | 鼠标按键被按下事件 | 大部分 HTML 元素 |\n| mouseup | 鼠标按键抬起事件 | 大部分 HTML 元素 |\n| mousemove | 鼠标在组件内移动事件 | 大部分 HTML 元素 |\n| mouseout | 鼠标移出组件时触发 | 大部分 HTML 元素 |\n| mouseover | 鼠标移入组件时触发 | 大部分 HTML 元素 |\n| Keypdown | 键盘按键被按下 | HTML 中所有表单元素 |\n| keyup | 键盘按键被抬起 | HTML 中所有表单元素 |\n\n### 事件修饰符\n\n- capture修饰符\n    \n    可以将监听事件的实际设置为捕获阶段，示例如下：\n    \n    ```html\n           <div @click.capture=\"click1\" style=\"border:solid red\">\n                外层\n               <div @click.capture=\"click2\" style=\"border:solid red\">\n                   中层\n                   <div @click.capture=\"click3\" style=\"border:solid red\">\n                       点击\n                   </div>\n               </div>\n           </div>\n          \n    ```\n    \n    点击最内层元素，控制台输出：\n    \n    ```html\n    外层\n    中层\n    内层\n    ```\n    \n- stop修饰符\n    \n    stop修饰符可以阻止事件的传递，例如：\n    \n    ```html\n           <div @click.stop=\"click1\" style=\"border:solid red\">\n                外层\n               <div @click.stop=\"click2\" style=\"border:solid red\">\n                   中层\n                   <div @click.stop=\"click3\" style=\"border:solid red\">\n                       点击\n                   </div>\n               </div>\n           </div>\n    ```\n    \n    点击最内层元素，控制台：\n    \n    ```html\n    内层\n    ```\n    \n- 其他修饰符\n    \n    \n    |  |  |\n    | --- | --- |\n    | 事件修饰符 | 作 用 |\n    | stop | 阻止事件传递 |\n    | capture | 监听捕获场景的事件 |\n    | once | 只触发一次事件 |\n    | exact | 只有精确满足按键的条件才会触发事件（按键组合） |\n    | self | 当事件对象的 target 属性是当前组件时才触发事件 |\n    | Prevent | 禁止默认的事件 |\n    | passive | 不禁止默认事件 |\n    | 其他鼠标按键修饰符 |  |\n    | left | 鼠标左键（click.left） |\n    | right | 鼠标右键 |\n    | middle | 鼠标中键 |\n- 系统按键修饰符\n    \n    Vue中还提供了一些特殊的系统按键修饰符，这些修饰符是配合其他键盘按键或鼠标按键进行使用的，主要有如下4种：\n    \n    **ctrl, shift, alt, meta(windows/command)**\n    \n    示例：\n    \n    ```html\n    \n    <div @mousedown. ctrl=\"mousedown\">鼠标按下</div>\n    <--! 上面代码的作用是用户按下Ctrl键的同时,再按下鼠标按键才会触发绑定的事件函数。-->\n    ```\n    \n    ```html\n    <input @keyup.alt.enter=\"keyup\"></input> \n    <--! 上面代码的作用是用户按下Alt键的同时,再按回车键才会触发绑定的事件函数。 -->\n    ```\n    \n\n---\n\n# v-bind(:)\n\n## 基本用法\n\n为html标签绑定属性值（在html标签内，不能使用插值表达式）\n\n![image 2.png](https://img.xwyue.com/i/2025/09/29/68da7be6df9dd.png)\n\n---","tags":["Vue3","Frontend"],"categories":["notes"]},{"title":"Data type","url":"/2025/06/23/type/","content":"![data_type](/img/type.png)","tags":["SQL"],"categories":["notes"]},{"title":"Distinguish having and where","url":"/2025/06/16/having-where/","content":"\n|  | WHERE | HAVING |\n| --- | --- | --- |\n| 执行时机 | 分组前过滤 | 分组后过滤 |\n| 使用对象 | 原始表中的列 | 分组结果或聚合函数计算结果 |\n| 性能 | 通常更高效 | 通常效率较低 |\n\n```sql\nSELECT department, AVG(salary) \nFROM employees \nGROUP BY department \nHAVING AVG(salary) > 5000;  -- 不能用WHERE过滤聚合结果\n```\n\n```sql\nSELECT product_id, COUNT(*) as order_count\nFROM orders\nGROUP BY product_id\nHAVING order_count > 10;  -- 过滤分组后的计数结果\n```\n\n```sql\nSELECT customer_id, SUM(amount) as total_spent\nFROM transactions\nGROUP BY customer_id\nHAVING total_spent > 1000;  -- WHERE不能使用别名\n```\n\n---\n\n# 使用建议\n\n1. **优先使用WHERE**：能在WHERE中完成的条件就不要用HAVING，减少分组处理的数据量\n2. **必须时才用HAVING**：只有当过滤条件依赖于分组结果或聚合函数时才使用HAVING\n3. **组合使用**：经常WHERE和HAVING一起使用，先用WHERE初步筛选，再用HAVING对分组结果过滤","tags":["SQL"],"categories":["notes"]},{"title":"Regular Expression","url":"/2025/06/15/regexp/","content":"\n# 一般形式\n\n```sql\nWHERE example_column REGEXP '这里写正则表达式内容'\n```\n\n**注意**：\n\n- 要加引号\n- 默认情况**不**区分大小写\n    \n    若要区分，则使用\n    \n\n```sql\nREGEXP BINARY\n```\n\n---\n\n# 基本用法\n\n^ 表示字符串开始\n\ne.g.  ^e表示以e开始\n\n**注意:若^在[]里面,则表示取补集**\n\ne.g.  [^a]表示除了a以外的所有字母\n\n---\n\n$表示字符串结束\n\ne.g.x$表示以x结束\n\n---\n\n[]表示 character set，结合-使用表示范围，\n\ne.g: [1-9]表示1,2,3,4,5....8,9组成的集合\n\n[cde]表示c,d,e中的一个字符\n\n---\n\n{}为数量符,匹配前一个字符的数量\n\ne.g: [0-9]{2}表示2个0-9中的任意字符\n\ne{3,5}表示至少3个,至多5个e\n\n---\n\n？为数量符，匹配前一个字符1次或0次 \n\ne.g.  -?表示搜寻'0个或者1个字符 \"-\" \n\n---\n\n+为数量符,匹配前一个字符至少1次\n\ne.g.  3[a-z]+4表示3与4之间有至少一个字母\n\n---\n\n*为数量符,匹配前一个字符0次或多次(包括1次)\n\n.等价于占位符,匹配(除了换行符外的)单个字符\n\n|表示逻辑运算符”或”\n\n---\n\n# 例题\n\n[电话号码格式校验_牛客题霸_牛客网](https://www.nowcoder.com/share/jump/1510625831749995207287)\n\n[【鲸析】SQL面试大实话之【正则表达式 REGEXP 实战解析】_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1UB4y1L7gz)\n\n---\n\n# 总结\n\n![regular_expression_summary](/img/image.png)","tags":["SQL"],"categories":["notes"]},{"title":"Union","url":"/2025/06/05/union/","content":"\n# Basic Sentence\n\n```sql\nSELECT column_name(s) FROM table_name1\nUNION\nSELECT column_name(s) FROM table_name2\n```\n\n- The SELECT statements within a UNION must have the **same number of columns**. Columns must also have **similar data types**. Meanwhile, the **order of the columns in each SELECT statement must be the same**.\n- SELECT will **automatic deduplication**, while SELECT ALL will not.\n\n---\n\n## UNION\n\n<a id=\"section2\"></a>\n**Tables:**\n\nemployees:\n\n| emp_id | name | dpt_id |\n| --- | --- | --- |\n| 1 | apple | 101 |\n| 2 | boy | 102 |\n| 3 | cat | 101 |\n| 4 | dog | 103 |\n\nformer_employees:\n\n| emp_id | name | dpt_id |\n| --- | --- | --- |\n| 5 | egg | 102 |\n| 2 | boy | 102 |\n\n```sql\nSELECT name, dpt_id FROM employees\nUNION\nSELECT name, dpt_id FROM former_employees;\n```\n\nresult:\n\n| name | dpt_id |  |\n| --- | --- | --- |\n| apple | 101 |  |\n| boy | 102 | **automatic deduplication** |\n| cat | 101 |  |\n| dog | 103 |  |\n| egg | 102 |  |\n\n---\n\n## UNION ALL\n\n[Tables](#section2): \n\n```sql\nSELECT name, dpt_id FROM employees\nUNION ALL\nSELECT name, dpt_id FROM former_employees;\n```\n\n**result:**\n\n| name | dpt_id |  |\n| --- | --- | --- |\n| apple | 101 |  |\n| boy | 102 | first record |\n| cat | 101 |  |\n| dog | 103 |  |\n| egg | 102 |  |\n| boy | 102 | from former_employees |v","tags":["SQL"],"categories":["notes"]},{"title":"Join(two tables)","url":"/2025/06/04/join/","content":"\n# Basic sentence\n\n```sql\nSELECT columns\nFROM table1\n() JOIN table2\nON table1.column_name=table2.column_name; \n```\n\n## INNER JOIN\n\nINNER JOIN equals to JOIN,\n\nExplicit form \n\n```sql\nINNER JOIN\n```\n\nImplicit form\n\n```sql\nJOIN\n```\n<a id=\"section1\"></a>\n### Tables :\n\nPerson :\n\n| personID | lastName | firstName |\n| --- | --- | --- |\n| 1 | Wang | Allen |\n| 2 | Alice | Bob |\n\nAddress:\n\n| addressID | personID | city | state |\n| --- | --- | --- | --- |\n| 1 | 2 | New York City | New York |\n| 2 | 3 | Leetcode | California |\n\n```sql\nSELECT Person.firstName, Address.city\nFROM Person\nINNER JOIN Address\nON Person.personID = Address.personID;\n```\n\n**result:**\n\n| firstName | city |\n| --- | --- |\n| Bob | New York City |\n\n---\n\n## LEFT JOIN\n\n### [Tables :](#section1)\n\n```sql\nSELECT Person.firstName, Address.city\nFROM Person LEFT JOIN Address # Write in one line is more intuitive\nON Person.personID = Address.personID;\n```\n\n**result:**\n\n| firstName | city |\n| --- | --- |\n| Bob | New York City |\n| Allen | NULL |\n\n---\n\n## RIGHT JOIN\n\n### [Tables :](#section1)\n\n```sql\nSELECT Person.firstName, Address.city\nFROM Person RIGHT JOIN Address # Write in one line is more intuitive\nON Person.personID = Address.personID;\n```\n\n**result:**\n\n| firstName | city |\n| --- | --- |\n| Bob | New York City |\n| NULL | Leetcode |\n\n---\n\n## FULL JOIN\n\n### [Tables :](#section1)\n\n```sql\nSELECT Person.firstName, Address.city\nFROM Person \nFULL JOIN Address\nON Person.personID = Address.personID;\n```\n\n**result:**\n\n| firstName | city |\n| --- | --- |\n| Bob | New York City |\n| Allen | NULL |\n| NULL | Leetcode |\n\n---\n\n# Summary\n\n![join_summary](/img/屏幕截图_2025-06-05_104939.png)\n\n","tags":["SQL"],"categories":["notes"]}]