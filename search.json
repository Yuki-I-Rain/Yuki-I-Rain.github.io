[{"title":"Hello World","url":"/2025/09/14/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["Hexo"],"categories":["Instruction"]},{"title":"Data type","url":"/2025/06/23/type/","content":"![data_type](/img/type.png)","tags":["SQL"],"categories":["notes"]},{"title":"Distinguish having and where","url":"/2025/06/16/having-where/","content":"\n|  | WHERE | HAVING |\n| --- | --- | --- |\n| 执行时机 | 分组前过滤 | 分组后过滤 |\n| 使用对象 | 原始表中的列 | 分组结果或聚合函数计算结果 |\n| 性能 | 通常更高效 | 通常效率较低 |\n\n```sql\nSELECT department, AVG(salary) \nFROM employees \nGROUP BY department \nHAVING AVG(salary) > 5000;  -- 不能用WHERE过滤聚合结果\n```\n\n```sql\nSELECT product_id, COUNT(*) as order_count\nFROM orders\nGROUP BY product_id\nHAVING order_count > 10;  -- 过滤分组后的计数结果\n```\n\n```sql\nSELECT customer_id, SUM(amount) as total_spent\nFROM transactions\nGROUP BY customer_id\nHAVING total_spent > 1000;  -- WHERE不能使用别名\n```\n\n---\n\n# 使用建议\n\n1. **优先使用WHERE**：能在WHERE中完成的条件就不要用HAVING，减少分组处理的数据量\n2. **必须时才用HAVING**：只有当过滤条件依赖于分组结果或聚合函数时才使用HAVING\n3. **组合使用**：经常WHERE和HAVING一起使用，先用WHERE初步筛选，再用HAVING对分组结果过滤","tags":["SQL"],"categories":["notes"]},{"title":"Regular Expression","url":"/2025/06/15/regexp/","content":"\n# 一般形式\n\n```sql\nWHERE example_column REGEXP '这里写正则表达式内容'\n```\n\n**注意**：\n\n- 要加引号\n- 默认情况**不**区分大小写\n    \n    若要区分，则使用\n    \n\n```sql\nREGEXP BINARY\n```\n\n---\n\n# 基本用法\n\n^ 表示字符串开始\n\ne.g.  ^e表示以e开始\n\n**注意:若^在[]里面,则表示取补集**\n\ne.g.  [^a]表示除了a以外的所有字母\n\n---\n\n$表示字符串结束\n\ne.g.x$表示以x结束\n\n---\n\n[]表示 character set，结合-使用表示范围，\n\ne.g: [1-9]表示1,2,3,4,5....8,9组成的集合\n\n[cde]表示c,d,e中的一个字符\n\n---\n\n{}为数量符,匹配前一个字符的数量\n\ne.g: [0-9]{2}表示2个0-9中的任意字符\n\ne{3,5}表示至少3个,至多5个e\n\n---\n\n？为数量符，匹配前一个字符1次或0次 \n\ne.g.  -?表示搜寻'0个或者1个字符 \"-\" \n\n---\n\n+为数量符,匹配前一个字符至少1次\n\ne.g.  3[a-z]+4表示3与4之间有至少一个字母\n\n---\n\n*为数量符,匹配前一个字符0次或多次(包括1次)\n\n.等价于占位符,匹配(除了换行符外的)单个字符\n\n|表示逻辑运算符”或”\n\n---\n\n# 例题\n\n[电话号码格式校验_牛客题霸_牛客网](https://www.nowcoder.com/share/jump/1510625831749995207287)\n\n[【鲸析】SQL面试大实话之【正则表达式 REGEXP 实战解析】_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1UB4y1L7gz)\n\n---\n\n# 总结\n\n![regular_expression_summary](/img/image.png)","tags":["SQL"],"categories":["notes"]},{"title":"Union","url":"/2025/06/05/union/","content":"\n# Basic Sentence\n\n```sql\nSELECT column_name(s) FROM table_name1\nUNION\nSELECT column_name(s) FROM table_name2\n```\n\n- The SELECT statements within a UNION must have the **same number of columns**. Columns must also have **similar data types**. Meanwhile, the **order of the columns in each SELECT statement must be the same**.\n- SELECT will **automatic deduplication**, while SELECT ALL will not.\n\n---\n\n## UNION\n\n<a id=\"section2\"></a>\n**Tables:**\n\nemployees:\n\n| emp_id | name | dpt_id |\n| --- | --- | --- |\n| 1 | apple | 101 |\n| 2 | boy | 102 |\n| 3 | cat | 101 |\n| 4 | dog | 103 |\n\nformer_employees:\n\n| emp_id | name | dpt_id |\n| --- | --- | --- |\n| 5 | egg | 102 |\n| 2 | boy | 102 |\n\n```sql\nSELECT name, dpt_id FROM employees\nUNION\nSELECT name, dpt_id FROM former_employees;\n```\n\nresult:\n\n| name | dpt_id |  |\n| --- | --- | --- |\n| apple | 101 |  |\n| boy | 102 | **automatic deduplication** |\n| cat | 101 |  |\n| dog | 103 |  |\n| egg | 102 |  |\n\n---\n\n## UNION ALL\n\n[Tables](#section2): \n\n```sql\nSELECT name, dpt_id FROM employees\nUNION ALL\nSELECT name, dpt_id FROM former_employees;\n```\n\n**result:**\n\n| name | dpt_id |  |\n| --- | --- | --- |\n| apple | 101 |  |\n| boy | 102 | first record |\n| cat | 101 |  |\n| dog | 103 |  |\n| egg | 102 |  |\n| boy | 102 | from former_employees |v","tags":["SQL"],"categories":["notes"]},{"title":"Join(two tables)","url":"/2025/06/04/join/","content":"\n# Basic sentence\n\n```sql\nSELECT columns\nFROM table1\n() JOIN table2\nON table1.column_name=table2.column_name; \n```\n\n## INNER JOIN\n\nINNER JOIN equals to JOIN,\n\nExplicit form \n\n```sql\nINNER JOIN\n```\n\nImplicit form\n\n```sql\nJOIN\n```\n<a id=\"section1\"></a>\n### Tables :\n\nPerson :\n\n| personID | lastName | firstName |\n| --- | --- | --- |\n| 1 | Wang | Allen |\n| 2 | Alice | Bob |\n\nAddress:\n\n| addressID | personID | city | state |\n| --- | --- | --- | --- |\n| 1 | 2 | New York City | New York |\n| 2 | 3 | Leetcode | California |\n\n```sql\nSELECT Person.firstName, Address.city\nFROM Person\nINNER JOIN Address\nON Person.personID = Address.personID;\n```\n\n**result:**\n\n| firstName | city |\n| --- | --- |\n| Bob | New York City |\n\n---\n\n## LEFT JOIN\n\n### [Tables :](#section1)\n\n```sql\nSELECT Person.firstName, Address.city\nFROM Person LEFT JOIN Address # Write in one line is more intuitive\nON Person.personID = Address.personID;\n```\n\n**result:**\n\n| firstName | city |\n| --- | --- |\n| Bob | New York City |\n| Allen | NULL |\n\n---\n\n## RIGHT JOIN\n\n### [Tables :](#section1)\n\n```sql\nSELECT Person.firstName, Address.city\nFROM Person RIGHT JOIN Address # Write in one line is more intuitive\nON Person.personID = Address.personID;\n```\n\n**result:**\n\n| firstName | city |\n| --- | --- |\n| Bob | New York City |\n| NULL | Leetcode |\n\n---\n\n## FULL JOIN\n\n### [Tables :](#section1)\n\n```sql\nSELECT Person.firstName, Address.city\nFROM Person \nFULL JOIN Address\nON Person.personID = Address.personID;\n```\n\n**result:**\n\n| firstName | city |\n| --- | --- |\n| Bob | New York City |\n| Allen | NULL |\n| NULL | Leetcode |\n\n---\n\n# Summary\n\n![join_summary](/img/屏幕截图_2025-06-05_104939.png)\n\n","tags":["SQL"],"categories":["notes"]}]